data(TestData)
assignFile<-read.table(paste(path.package("phrapl"),"/extdata/cladeAssignments.txt",sep=""),
header=TRUE,stringsAsFactors=FALSE)
assignFile<-read.table(paste(path.package("phrapl"),"/extdata/cladeAssignments.txt",sep=""),
header=TRUE,stringsAsFactors=FALSE)
head(assignFile)
trees
par(mfrow=c(3,3))
dum <- lapply(1:9, function(x) plot.phylo(trees[[x]], cex=0.7))
par(mfrow=c(3,4))
dum <- lapply(1:length(trees), function(x) plot.phylo(trees[[x]], cex=0.7))
par(mfrow=c(3,4))
dum <- lapply(1:length(trees), function(x) plot.phylo(trees[[x]], cex=0.7), tip.color=rainbow(61))
par(mfrow=c(3,4))
dum <- lapply(1:length(trees), function(x) plot.phylo(trees[[x]], cex=0.7, tip.color=rainbow(61)))
trees[[1]]$tip.label
trees[[2]]$tip.label
par(mfrow=c(3,4))
dum <- lapply(1:length(trees), function(x) plot.phylo(trees[[x]], cex=0.7, tip.color=rainbow(61)[as.numeric(trees[[x]]$tip.label)]))
assignFile<-read.table(paste(path.package("phrapl"),"/extdata/cladeAssignments.txt",sep=""),
header=TRUE,stringsAsFactors=FALSE)
table(assignFile)
assignFile<-read.table(paste(path.package("phrapl"),"/extdata/cladeAssignments.txt",sep=""),
header=TRUE,stringsAsFactors=FALSE)
tapply(assignFile[,2], assignFile[,2], length)
popAssignments<-list(c(3,3,3))
popAssignments
dum <- lapply(1:length(trees), function(x) plot.phylo(trees[[x]], cex=0.7, tip.color=rainbow(61)[as.numeric(trees[[x]]$tip.label)]))
assignmentsGlobal<-assignFile
observedTrees<-trees
popAssignments<-list(c(3,3,3))
subsamplesPerGene<-10
outgroup=TRUE
outgroupPrune=TRUE
observedTrees<-PrepSubsampling(assignmentsGlobal=assignmentsGlobal,observedTrees=observedTrees,
popAssignments=popAssignments,subsamplesPerGene=subsamplesPerGene,outgroup=outgroup,
outgroupPrune=outgroupPrune)
assignmentsGlobal<-assignFile
observedTrees<-trees
popAssignments<-list(c(3,3,3))
subsamplesPerGene<-10
outgroup=TRUE
outgroupPrune=TRUE
observedTrees<-PrepSubsampling(assignmentsGlobal=assignmentsGlobal,observedTrees=observedTrees,
popAssignments=popAssignments,subsamplesPerGene=subsamplesPerGene,outgroup=outgroup,
outgroupPrune=outgroupPrune)
observedTrees
subsampleWeights.df<-GetPermutationWeightsAcrossSubsamples(popAssignments=popAssignments,
observedTrees=observedTrees)
observedTrees
observedTrees
par(mfrow=c(3,3))
dum <- lapply(1:9, function(x) plot(observedTrees[[1]][[x]]))
observedTrees[[1]][[1]]
trees$tip.label
dum <- lapply(1:9, function(x) plot(observedTrees[[1]][[x]]))
par(mfrow=c(3,3))
dum <- lapply(1:9, function(x) plot(observedTrees[[1]][[x]]))
attributes(observedTrees)
attributes(observedTrees[[1]])
observedTrees[[100]]
observedTrees[[1]][[100]]
popVector<-popAssignments[[1]]
maxK<-3
maxMigrationK=1
maxN0K=1
maxGrowthK=0
forceTree=TRUE
forceSymmetricalMigration=TRUE
migrationArray<-GenerateMigrationIndividuals(popVector=popVector,maxK=maxK,
maxMigrationK=maxMigrationK,maxN0K=maxN0K,maxGrowthK=maxGrowthK,
forceTree=forceTree,forceSymmetricalMigration=forceSymmetricalMigration)
migrationArray
unlist(strsplit(grep("MigrationArray",list.files(paste(path.package("phrapl"),
"/data/",sep="")),value=TRUE),".rda"))
migrationArray<-AddGrowthToAMigrationArray(migrationArray)
collapseList = list(c(1,1,0),c(2,NA,2))
n0multiplierList = list(c(1,1,1),c(1,NA,1))
n0multiplierList = list(c(1,1,1),c(1,NA,1))
growthList = list(c(1,1,1),c(2,NA,2))
n0multiplierList = list(c(1,1,1),c(1,NA,1))
growthList = list(c(1,1,1),c(2,NA,2))
migrationList<-list(
t(array(c(
NA, 1, 0,
1, NA, 0,
0, 0, NA),
dim=c(3,3))),
t(array(c(
NA, NA, 0,
NA, NA, NA,
0,  NA, NA),
dim=c(3,3))))
migration_1<-t(array(c(
NA, 1, 0,
2, NA, 0,
0, 0, NA),
dim=c(3,3)))
migration_2<-t(array(c(
NA, NA, 0,
NA, NA, NA,
0,  NA, NA),
dim=c(3,3)))
migration_1<-t(array(c(
NA, 1, 0,
2, NA, 0,
0, 0, NA),
dim=c(3,3)))
migration_2<-t(array(c(
NA, NA, 0,
NA, NA, NA,
0,  NA, NA),
dim=c(3,3)))
migrationList<-list(migration_1,migration_2)
migrationArray<-c(migrationArray,list(migrationIndividual))
migrationIndividual<-GenerateMigrationIndividualsOneAtATime(collapseList=collapseList,
n0multiplierList=n0multiplierList,growthList=growthList,migrationList=migrationList)
migrationArray<-c(migrationArray,list(migrationIndividual))
migrationArray[[49]]
migrationIndividual<-GenerateMigrationIndividualsOneAtATime(collapseList=collapseList,
migrationList=migrationList)
migrationIndividual<-GenerateMigrationIndividualsOneAtATime(collapseList=collapseList,
migrationList=migrationList)
migrationIndividual<-GenerateMigrationIndividualsOneAtATime(collapseList=collapseList,
migrationList=migrationList)
migrationIndividual
modelRange<-1:3
nTrees<-1000
result<-GridSearch(migrationArray=migrationArray,modelRange=modelRange,popAssignments=popAssignments,
observedTrees=observedTrees,subsampleWeights.df=subsampleWeights.df,
subsamplesPerGene=subsamplesPerGene,nTrees=nTrees)
save(list="result",file="phraplOutput_models1-3.rda")
totalResults<-ConcatenateResults(rdaFiles="phraplOutput_models1-3.rda",
migrationArray=migrationArray)
modelAverages<-CalculateModelAverages(totalResults)
PlotModel(migrationIndividual=migrationArray[[1]],taxonNames=c("A","B","C"))
modelRange<-1:3
nTrees<-10000
result<-GridSearch(migrationArray=migrationArray,modelRange=modelRange,popAssignments=popAssignments,
observedTrees=observedTrees,subsampleWeights.df=subsampleWeights.df,
subsamplesPerGene=subsamplesPerGene,nTrees=nTrees)
save(list="result",file="phraplOutput_models1-3_3species.rda")
result<-GridSearch(migrationArray=migrationArray,modelRange=modelRange,popAssignments=popAssignments,
observedTrees=observedTrees,subsampleWeights.df=subsampleWeights.df,
subsamplesPerGene=subsamplesPerGene,nTrees=nTrees,setCollapseZero=1)
save(list="result",file="phraplOutput_models1-3_2species.rda")
result<-GridSearch(migrationArray=migrationArray,modelRange=modelRange,popAssignments=popAssignments,
observedTrees=observedTrees,subsampleWeights.df=subsampleWeights.df,
subsamplesPerGene=subsamplesPerGene,nTrees=nTrees,setCollapseZero=1:2)
getAnywhere("read.nexus")
?read.nexus
?rncl
trees
rm(list=ls(all=TRUE))
library(devtools)
library(geiger)
library(phytools)
library(foreach)
library(doParallel)
library(treeplyr)
#install_github("uyedaj/bayou", ref = "dev")
library(bayou)
tree <- sim.bdtree(b = 1, d = 0, stop = "taxa", n = 50, seed = 1)
tree$edge.length <- tree$edge.length/max(branching.times(tree))*100
tree <- reorder(tree, "postorder")
plot(tree, cex = 0.5)
simpars <- list(alpha=1, sig2=1, k=2, ntheta=3, theta=c(0,-1,1))
simpars
shiftlocations <- list(sb = c(94, 71), loc = c(6.23, 6.52))
shiftlocations <- identifyBranches(tree, simpars$k) ## Copy and paste into the
shiftlocations
simpars <- c(simpars, shiftlocations)
simpars$t2 <- 2:3
simpars
plotBayoupars(simpars, tree)
plotOUtreesim(simpars, tree)
abline(h = simpars$theta, col=rainbow(3))
simpars$alpha <- ? #Type one (positive) number
plotOUtreesim(simpars, tree)
abline(h = simpars$theta, col=rainbow(3))
simpars$alpha <- 500 #Type one (positive) number
plotOUtreesim(simpars, tree)
abline(h = simpars$theta, col=rainbow(3))
simpars$alpha <- 0.01 #Type one (positive) number
plotOUtreesim(simpars, tree)
abline(h = simpars$theta, col=rainbow(3))
simpars$sig2  <-  0.1          #Type one (positive) number
simpars$theta <- c(0, -4, 4)  #Type simpars$ntheta numbers
plotOUtreesim(simpars, tree)
abline(h=seq(-10, 10, 1), lty=3, lwd=0.5)
abline(h = simpars$theta, col=rainbow(3))
simpars$sig2  <-  0.1          #Type one (positive) number
simpars$theta <- c(0, -4, 4)  #Type simpars$ntheta numbers
plotOUtreesim(simpars, tree)
abline(h=seq(-10, 10, 1), lty=3, lwd=0.5)
abline(h = simpars$theta, col=rainbow(3))
simpars$sig2  <-  0.01          #Type one (positive) number
simpars$theta <- c(0,3, 10)  #Type simpars$ntheta numbers
plotOUtreesim(simpars, tree)
abline(h=seq(-10, 10, 1), lty=3, lwd=0.5)
abline(h = simpars$theta, col=rainbow(3))
VCV <- vcv.phylo(tree)
heatmap(VCV)
ouV_0.000000001 <- bayou:::.ouMatrix(VCV, alpha = 0.000000001)
ouV_0.0001 <- bayou:::.ouMatrix(VCV, alpha = 0.0001)
ouV_0.001 <- bayou:::.ouMatrix(VCV, alpha = 0.001)
ouV_0.01 <- bayou:::.ouMatrix(VCV,  alpha = 0.01)
ouV_0.1 <- bayou:::.ouMatrix(VCV,  alpha = 0.1)
ouV_1.0 <- bayou:::.ouMatrix(VCV,  alpha = 1)
ouV_10.0 <- bayou:::.ouMatrix(VCV,  alpha = 10)
ouV_100000000.0 <- bayou:::.ouMatrix(VCV,  alpha = 100000000)
heatmap(ouV_0.000000001)
heatmap(ouV_0.0001)
heatmap(ouV_0.001)
heatmap(ouV_0.01)
heatmap(ouV_0.1)
heatmap(ouV_1.0)
heatmap(ouV_10.0)
heatmap(ouV_100000000.0)
bayou:::.ouMatrix
log(2)/c(0.000000001, 0.001, 0.01, 0.1, 1, 10, 10000000000)
round(log(2)/c(0.000000001, 0.001, 0.01, 0.1, 1, 10, 10000000000), 2)
set.seed(1)
truepars <- list(alpha=0.1, sig2=0.1,
k=4, ntheta=5, theta=rnorm(5, 0, 4))
trueshiftlocations <- list(sb = c(94, 71, 45, 12), loc = c(6.9, 2.2, 0.8, 3.9)) # I encourage you to use identifyBranches instead.
truepars <- c(truepars, trueshiftlocations)
truepars$t2 <- 2:5
plotBayoupars(truepars, tree, cex = 0.5)
dat <- dataSim(truepars, tree, model="OU")$dat
simpars
truepars
dhalfcauchy(100, scale=0.1)
rhalfcauchy(100, scale=0.1)
priorOU <- make.prior(tree,
dists=list(dalpha="dhalfcauchy", dsig2="dhalfcauchy",
dk="cdpois", dtheta="dnorm"),
param=list(dalpha=list(scale=0.1), dsig2=list(scale=0.1),
dk=list(lambda=10, kmax=50), dsb=list(bmax=1, prob=1),
dtheta=list(mean=mean(dat), sd=1.5*sd(dat)))
)
quantiles <- c(0, 0.01, 0.025, 0.25, 0.5, 0.75, 0.975, 0.99, 1)
alfs <- rhalfcauchy(10000, scale = 0.1)
qs <- quantile(log(2)/alfs, quantiles) ## Use 'alfs' and math to calculate the quantiles of phylogenetic half-life
round(qs, 2)
startpars <- priorSim(priorOU, tree, plot=TRUE)$pars[[1]]
priorOU(startpars)
tree
dat
MEvar
MEvar = 0.1
set.seed(1)
mcmcOU <- bayou.makeMCMC(tree, dat, SE=MEvar, prior=priorOU,
new.dir="../output/modelOU/", outname="modelOU_r001", plot.freq=NULL) # Set up the MCMC
getwd()
setwd("~/repos/ssb2017/bayou/R")
set.seed(1)
mcmcOU <- bayou.makeMCMC(tree, dat, SE=MEvar, prior=priorOU,
new.dir="../output/modelOU/", outname="modelOU_r001", plot.freq=NULL) # Set up the MCMC
mcmcOU$run(10000)
mcmcOU$run(10000)
mcmcOU$run(10000)
chainOU <- mcmcOU$load()
chainOU <- set.burnin(chainOU, 0.3)
summary(chainOU)
plot(chainOU, auto.layout=FALSE)
par(mfrow=c(2,2))
plotBayoupars(truepars, tree, main = "True parameters")
plotSimmap.mcmc(chainOU, burnin = 0.3, pp.cutoff = 0.3)
plotBranchHeatMap(tree, chainOU, "theta", burnin = 0.3, pal = cm.colors)
phenogram.density(tree, dat, burnin = 0.3, chainOU, pp.cutoff = 0.3)
par.halflife <- list(meanlog=2.5, sdlog=2.5)
#Draw a bunch of samples from this distribution:
samp <- rlnorm(10000, par.halflife$meanlog, par.halflife$sdlog)
hist(log(samp,10), breaks=100, main="Prior density of halflife")
abline(v=log(c(1,max(branching.times(tree))),10), col="red", lwd=2, lty=2)
qs <- qlnorm(quantiles, meanlog=par.halflife$meanlog, sdlog=par.halflife$sdlog)
round(setNames(qs, quantiles), 2)
par.Vy <- list(meanlog=log(0.0958), sdlog=0.25)
hist(rlnorm(10000, par.Vy$meanlog, par.Vy$sdlog), main="Prior density of Vy")
priorBB <- make.prior(tree,
dists=list(dhalflife="dlnorm", dVy="dlnorm",
dk="cdpois", dsb="dsb", dtheta="dnorm"),
param=list(dhalflife=par.halflife,
dVy=par.Vy,
dk=list(lambda=10, kmax=50), dsb=list(bmax=1, prob=1),
dtheta=list(mean=mean(dat), sd=1.5*sd(dat))),
model="OUrepar"
)
set.seed(1)
mcmcBB <- bayou.makeMCMC(tree, dat, SE=MEvar, model="OUrepar", prior=priorBB, new.dir="../output/modelBB/", outname="modelBB_r001", plot.freq=NULL)
mcmcBB$run(10000)
chainBB <- mcmcBB$load()
chainBB <- set.burnin(chainBB, 0.3)
summary(chainBB)
plot(chainBB)
par(mfrow=c(2,2))
plotBayoupars(truepars, tree, main = "True parameters")
plotSimmap.mcmc(chainBB, burnin = 0.3, pp.cutoff = 0.3)
plotBranchHeatMap(tree, chainBB, "theta", burnin = 0.3, pal = cm.colors)
phenogram.density(tree, dat, burnin = 0.3, chainBB, pp.cutoff = 0.3)
quantile(chainOU$sig2/(2*chainOU$alpha), quantiles)
quantile(chainBB$Vy, quantiles)
plot(rnorm(100), rnorm(100))
points(runif(100), runif(100), pch=21, bg="red")
names(chainOU)
chainOU$alpha
plot(log(2)/chainOU$alpha, chainOU$sig2/(2*chainOU$alpha))
#points(chainBB$ , chainBB$ , pch=21, bg="red")
plot(log(2)/chainOU$alpha, chainOU$sig2/(2*chainOU$alpha))
#points(chainBB$ , chainBB$ , pch=21, bg="red")
plot(log(2)/chainOU$alpha, chainOU$sig2/(2*chainOU$alpha))
points(chainBB$halflife , chainBB$Vy , pch=21, bg="red")
plot(chainOU$alpha, chainOU$sig2)
plot(log(2)/chainOU$alpha, chainOU$sig2/(2*chainOU$alpha))
points(chainBB$halflife , chainBB$Vy , pch=21, bg="red")
par.h2 <- list(shape1=10, shape2=10)
par.P <- list(meanlog=log(0.12), sdlog=0.2)
par.w2 <- list(meanlog=log(100), sdlog=2.5)
par.Ne <- list(meanlog=log(500000), sdlog=2.5)
QGtree <- tree
QGtree$edge.length <- QGtree$edge.length/2
priorQG <- make.prior(QGtree,
dists=list(dh2="dbeta", dP="dlnorm",
dw2="dlnorm", dNe="dlnorm",
dk="cdpois", dtheta="dnorm"),
param=list(dh2=par.h2,
dP=par.P,
dw2=par.w2,
dNe=par.Ne,
dk=list(lambda=10, kmax=50), dsb=list(bmax=1, prob=1),
dtheta=list(mean=mean(dat), sd=1.5*sd(dat))),
model="QG"
)
set.seed(1)
mcmcQG <- bayou.makeMCMC(QGtree, dat, SE=MEvar, model="QG", startpar=NULL, prior=priorQG, new.dir="../output/modelQG/", outname="modelQG_r001", plot.freq=NULL)
priorQG <- make.prior(QGtree, plot.prior=FALSE,
dists=list(dh2="dbeta", dP="dlnorm",
dw2="dlnorm", dNe="dlnorm",
dk="cdpois", dtheta="dnorm"),
param=list(dh2=par.h2,
dP=par.P,
dw2=par.w2,
dNe=par.Ne,
dk=list(lambda=10, kmax=50), dsb=list(bmax=1, prob=1),
dtheta=list(mean=mean(dat), sd=1.5*sd(dat))),
model="QG"
)
set.seed(1)
mcmcQG <- bayou.makeMCMC(QGtree, dat, SE=MEvar, model="QG", startpar=NULL, prior=priorQG, new.dir="../output/modelQG/", outname="modelQG_r001", plot.freq=NULL)
mcmcQG$run(10000)
chainQG <- mcmcQG$load()
chainQG <- set.burnin(chainQG, 0.3)
summary(chainQG)
plot(chainQG)
plot(chainQG)
plot(chainQG, auto.layout=FALSE)
par(mfrow=c(2,2))
plotBayoupars(truepars, tree, main = "True parameters")
plotSimmap.mcmc(chainQG, burnin = 0.3, pp.cutoff = 0.3)
plotBranchHeatMap(tree, chainQG, "theta", burnin = 0.3, pal = cm.colors)
phenogram.density(tree, dat, burnin = 0.3, chainQG, pp.cutoff = 0.3)
plot(chainQG$Ne)
registerDoParallel(cores=5)
Bk <- qbeta(seq(0,1, length.out=5), 0.3,1)
Bk
registerDoParallel(cores=5)
Bk <- qbeta(seq(0,1, length.out=5), 0.3,1)
ssOU <- mcmcOU$steppingstone(10000, chainOU, Bk, burnin=0.3, plot=FALSE)
ssBB <- mcmcBB$steppingstone(10000, chainBB, Bk, burnin=0.3, plot=FALSE)
ssQG <- mcmcQG$steppingstone(10000, chainQG, Bk, burnin=0.3, plot=FALSE)
mlnL <- c("OU"=ssOU$lnr, "BB"=ssBB$lnr, "QG"=ssQG$lnr)
mlnL
plot(ssOU)
plot(ssBB)
plot(ssQG)
trueFixedPrior <- make.prior(tree, dists=list(dalpha="dhalfcauchy", dsig2="dhalfcauchy",
dk="fixed", dsb="fixed",
dtheta="dnorm"),
param=list(dalpha=list(scale=0.1), dsig2=list(scale=0.1),
dk="fixed", dsb="fixed",
dtheta=list(mean=mean(dat), sd=1.5*sd(dat))),
fixed =list(k = truepars$k, sb = truepars$sb)
)
altlocations <- list(sb = c(89, 70, 85, 47, 50), loc = c(1.5, 6.6, 5.2, 3.7, 11.1)) # You can also use identifyBranches here
altpars <- truepars
altpars$k <- 5
altpars$sb <- altlocations$sb
altpars$loc <- altlocations$loc
altpars$t2 <- c(2, 3, 4, 5, 3) # Shifts on branches 89 and 50 both lead to regime #3
alternativeFixedPrior <- make.prior(tree, dists=list(dalpha="dhalfcauchy", dsig2="dhalfcauchy",
dk="fixed", dsb="fixed",
dtheta="dnorm"),
param=list(dalpha=list(scale=0.1), dsig2=list(scale=0.1),
dk="fixed", dsb="fixed",
dtheta=list(mean=mean(dat), sd=1.5*sd(dat))),
fixed=list(k = 5, ntheta = 5, sb = altpars$sb, loc = altpars$loc, t2 = altpars$t2)
)
par(mfrow=c(1,2))
plotBayoupars(truepars, tree, main="True Pars")
plotBayoupars(altpars, tree, main="Alternative Hypothesis")
mcmcFixed1 <- bayou.makeMCMC(tree, dat, SE=MEvar, prior=trueFixedPrior, new.dir="../output/Fixed/", outname="modelTrueFixed_r001", plot.freq=NULL)
mcmcFixed1$run(10000)
mcmcFixed2 <- bayou.makeMCMC(tree, dat, SE=MEvar, prior=alternativeFixedPrior, new.dir="../output/Fixed/", outname="modelAltFixed_r001", plot.freq=NULL)
mcmcFixed2$run(10000)
chainFixed1 <- mcmcFixed1$load()
chainFixed2 <- mcmcFixed2$load()
## Run the stepping stone estimation of marginal likelihoods.
Bk <- qbeta(seq(0,1, length.out=5), 0.3,1)
ssFixed1 <- mcmcFixed1$steppingstone(10000, chainFixed1, Bk)
ssFixed2 <- mcmcFixed2$steppingstone(10000, chainFixed2, Bk)
ssFixed1
ssFixed2
set.seed(1)
tree <- sim.bdtree(b=1, d=0, stop="taxa", n=50, seed=1)
tree$edge.length <- tree$edge.length/max(branching.times(tree))*100
tree <- reorder(tree, "postorder")
truepars <- list(alpha = 0.5, sig2 = 0.05,
k = 3, ntheta = 4,
beta_lnMass = c(0.75, 0.6, 0.9, 0.67),
theta = c(-1, 1.25, 0.5, 0),
sb = c(94, 71, 50),
loc = c(0, 0, 0),
t2 = 2:4)
pred <- cbind("lnMass" = sim.char(tree, 0.2, model="BM", root=3)[,,1])
phytools::phenogram(tree, setNames(pred[,1], tree$tip.label), spread.labels=FALSE, main="Predictor: Body Size (lnMass)")
dat <- dataSim(truepars, tree, model="OU")$dat + truepars$beta_lnMass[bayou:::.tipregime(truepars, tree)] * pred[,1]
pred
phytools::phenogram(tree, setNames(pred[,1], tree$tip.label), spread.labels=FALSE, main="Predictor: Body Size (lnMass)")
set.seed(1)
tree <- sim.bdtree(b=1, d=0, stop="taxa", n=50, seed=1)
tree$edge.length <- tree$edge.length/max(branching.times(tree))*100
tree <- reorder(tree, "postorder")
truepars <- list(alpha = 0.5, sig2 = 0.05,
k = 3, ntheta = 4,
beta_lnMass = c(0.75, 0.6, 0.9, 0.67),
theta = c(-1, 1.25, 0.5, 0),
sb = c(94, 71, 50),
loc = c(0, 0, 0),
t2 = 2:4)
pred <- cbind("lnMass" = sim.char(tree, 0.2, model="BM", root=3)[,,1])
phytools::phenogram(tree, setNames(pred[,1], tree$tip.label), spread.labels=FALSE, main="Predictor: Body Size (lnMass)")
dat <- dataSim(truepars, tree, model="OU")$dat + truepars$beta_lnMass[bayou:::.tipregime(truepars, tree)] * pred[,1]
par(mfrow=c(1,2))
## Plot the regime locations
plotRegimes(pars2simmap(truepars,tree)$tr,  col=pars2simmap(truepars,tree)$col)
## Plot the allometry
plot(pred[,1], dat, pch=21, bg=bayou:::.tipregime(truepars, tree), xlab="lnMass", "ylab"="Trait")
## Add the regression lines
dum <- lapply(1:truepars$ntheta, function(x) abline(truepars$theta[x], truepars$beta_lnMass[x],  lty=2, col=x))
prior.11 <- make.prior(tree, plot.prior = FALSE,
dists=list(dalpha="dhalfcauchy", dsig2="dhalfcauchy", dbeta_lnMass="dnorm",
dsb="fixed", dk="fixed", dtheta="dnorm"),
param=list(dalpha=list(scale=0.1), dsig2=list(scale=0.1),
dbeta_lnMass=list(mean=0.7, sd=0.15),
dtheta=list(mean=0, sd=1)),
fixed=list(k=0, sb=numeric(0))
)
prior.N1 <- make.prior(tree, plot.prior = FALSE,
dists=list(dalpha="dhalfcauchy", dsig2="dhalfcauchy", dbeta_lnMass="dnorm",
dsb="dsb", dk="cdpois", dtheta="dnorm"),
param=list(dbeta_lnMass=list(mean=0.7, sd=0.15),
dk=list(lambda=10, kmax=50),
dtheta=list(mean=0, sd=1))
)
prior.NN <- make.prior(tree, plot.prior = FALSE,
dists=list(dalpha="dhalfcauchy", dsig2="dhalfcauchy", dbeta_lnMass="dnorm",
dsb="dsb", dk="cdpois", dtheta="dnorm"),
param=list(dalpha=list(scale=0.1), dsig2=list(scale=0.1),
dbeta_lnMass=list(mean=0.7, sd=0.15),
dk=list(lambda=10, kmax=50),
dtheta=list(mean=0, sd=1))
)
D11 = list(alpha=2, sig2=2, beta_lnMass=0.1, k=1, theta=0.5, slide=1)
DN1 = list(alpha=2, sig2=2, beta_lnMass=0.1, k=1, theta=2, slide=1)
DNN = list(alpha=2, sig2=2, beta_lnMass=0.3, k=c(1,1), theta=2, slide=1)
set.seed(1)
model.11 <- makeBayouModel(dat ~ lnMass, rjpars = c(),
tree=tree, dat=dat, pred=pred, SE=MEvar, prior=prior.11, D=D11)
model.N1 <- makeBayouModel(dat ~ lnMass, rjpars = c("theta"),
tree=tree, dat=dat, pred=pred, SE=MEvar, prior=prior.N1, D=DN1)
model.NN <- makeBayouModel(dat ~ lnMass, rjpars = c("theta", "lnMass"),
tree=tree, dat=dat, pred=pred, SE=MEvar, prior=prior.NN, D=DNN)
names(model.11)
names(model.11$model)
model.11$model$rjpars
model.N1$model$rjpars
model.NNM$model$rjpars
model.NN$model$rjpars
## Make MCMC objects:
mcmc.11 <- bayou.makeMCMC(tree, dat, pred=pred, SE=MEvar, model=model.11$model, prior=prior.11, startpar=model.11$startpar, new.dir="../output/Allometry/", outname="model11_r001", plot.freq=NULL)
mcmc.N1 <- bayou.makeMCMC(tree, dat, pred=pred, SE=MEvar, model=model.N1$model, prior=prior.N1, startpar=model.N1$startpar, new.dir="../output/Allometry/", outname="modelN1_r001", plot.freq=NULL)
mcmc.NN <- bayou.makeMCMC(tree, dat, pred=pred, SE=MEvar, model=model.NN$model, prior=prior.NN, startpar=model.NN$startpar, new.dir="../output/Allometry/", outname="modelNN_r001", plot.freq=NULL)
set.seed(1)
mcmc.11$run(10000)
mcmc.N1$run(10000)
mcmc.NN$run(10000)
chain.11 <- set.burnin(mcmc.11$load(), 0.3)
chain.N1 <- set.burnin(mcmc.N1$load(), 0.3)
chain.NN <- set.burnin(mcmc.NN$load(), 0.3)
shiftsumsN1 <- shiftSummaries(chain.N1, mcmc.N1, pp.cutoff=0.5, burnin=0.3)
shiftsumsNN <- shiftSummaries(chain.NN, mcmc.NN, pp.cutoff=0.5, burnin=0.3)
plotShiftSummaries(shiftsumsN1, lwd=2, single.plot=TRUE, label.pts=FALSE)
plotShiftSummaries(shiftsumsNN, lwd=2, single.plot=TRUE, label.pts=FALSE)
registerDoParallel(cores=5)
Bk <- qbeta(seq(0,1, length.out=5), 0.3,1)
set.seed(1)
ss.11 <- mcmc.11$steppingstone(10000, chain.11, Bk, burnin=0.3, plot=FALSE)
ss.N1 <- mcmc.N1$steppingstone(10000, chain.N1, Bk, burnin=0.3, plot=FALSE)
ss.NN <- mcmc.NN$steppingstone(10000, chain.NN, Bk, burnin=0.3, plot=FALSE)
mlnL <- c("11"=ss.11$lnr, "N1"=ss.N1$lnr, "NN"=ss.NN$lnr)
mlnL
